import { Post } from "./posts/Post";
import { user } from "./core/user";
import { listeningType } from "./listeningType";
import { storeUser, getUser } from "./core/db";
import TelegramBot = require('node-telegram-bot-api');

const exampleURL = "https://vk.com/club41670861"
let IDContainedPublicURL = /(?<=https:\/\/vk\.com\/((club)|(public)))\d{4,}$/gm;
let PublicURL = /(?<=(https:\/\/)?vk\.com\/)(.+)$/gm;
let PublicID = /^\d{4,}$/;
let currentListening : listeningType = listeningType.GenericCommand;

const MyTelegramBot = new TelegramBot("676086893:AAFPGabadE6_qDJsgKyYcOC8aZRz91pkqxU");

import vk = require("./core/vk");
import { mkdir, mkdirSync, writeFileSync, rmdirSync } from "fs";
import { PhotoPostAttachment } from "./posts/PhotoPostAttachment";

var fs = require('fs');
var request = require('request');
/*
vk.getPosts(true, "41670861", 5, 0, (posts) => {
    posts.forEach(element => {
        console.log(element.toDebugJSON());
    });
})
*/
MyTelegramBot.startPolling( {restart: true} );

function download(url) {
    return require('child_process')
        .execFileSync('curl', ['--silent', '-L', url], {encoding: 'utf8'});
}

function sendPostMessage(id : number, post : Post) {
    
    console.log("send post message call");
    
    let group = [];
    for(let i = 0; i < post.attachments.length; i++)
        group.push( { type : "photo", media : (post.attachments[i] as PhotoPostAttachment).getOptimalSizeUrl() } )

    MyTelegramBot.sendMediaGroup(id, group);
}

function sendHelpMessage(id : number) {
    MyTelegramBot.sendMessage(
        id, 
        "–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤ —Å –í—ç–ö–∞ –≤–∞–º –≤ —Ç–µ–ª–µ–≥—É. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ " +
        "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞–±–ª–∏–∫–∏, –ø–æ—Å—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –±–æ—Ç–µ.\n\n" +
        "ü§î–ö–æ–º–º–∞–Ω–¥—ã –±–æ—Ç–∞ü§î\n–Æ–∑–∞–π:\n\n" +
        "/subscribe [group-id or group-link] - —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–±–ª–∏–∫–∞\n\n" + 
        "/getGroups - —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º–º—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤\n\n" +
        "/unsubscribe - —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–±–ª–∏–∫–∞\n\n" +
        "/getPosts <optional: group-id or group-link> <optional: posts count> - —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –ø–∞–±–ª–∏–∫–∞\n\n" +
        "/getWall <optional: posts count> - —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–≤–æ–∑–Ω–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤\n\n" + 
        "/help - –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç—É —Ö–µ–ª–ø—É"
    );
}

let Commands = {
    getList : "/getGroups",
    help : "/help",
    start : "/start",
    subscribe : "/subscribe",
    getPosts : "/getPosts",
    unsubscribe : "/unsubscribe"
}

MyTelegramBot.onText(new RegExp(Commands.getList), (msg, match) => {

    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }

    let u = getUser(msg.from.id);
    if(u.vkGroupsIds.length == 0) {
        MyTelegramBot.sendMessage(msg.from.id, `C–ø–∏—Å–æ–∫ –ø—É—Å—Ç`);
    } else { 
        let msge = "–í—ã –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n";
        for(let i = 0; i < u.vkGroupsIds.length; i++) {
            msge += `-"*${u.vkGroupsNames[i]}*" (ID: ${u.vkGroupsIds[i]})\n`
        }

        MyTelegramBot.sendMessage(msg.from.id, msge, {
            parse_mode : "Markdown"
        });
    }
});

MyTelegramBot.onText(new RegExp(Commands.help), (msg, match) => {
    
    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }

    sendHelpMessage(msg.from.id);
});

MyTelegramBot.onText(new RegExp(Commands.start), (msg, match) => {
    
    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }
    
    let newUser = new user(msg.from.id);
    newUser.registerDate = new Date(Date.now());
    storeUser(newUser);
    sendHelpMessage(msg.from.id);
});

MyTelegramBot.onText(new RegExp(Commands.subscribe), (msg, match) => {

    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }

    let u = getUser(msg.from.id);
    let cleanStr = msg.text.replace(Commands.subscribe, "").trim();
    if(cleanStr === "") {
        MyTelegramBot.sendMessage(
            msg.from.id, 
            `‚õîÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL-–∞–¥–¥—Ä–µ—Å –ø–∞–±–ª–∏–∫–∞ –∏–ª–∏ –µ–≥–æ ID. –ù–∞–ø—Ä–∏–º–µ—Ä: ${exampleURL}`
        );
        return;
    }
    let id : string = "";

    let fullURIMatch = cleanStr.match(IDContainedPublicURL);
    if(fullURIMatch) {
        id = fullURIMatch.toString();
    } else {

        let URIMatch = cleanStr.match(PublicURL);
        if(URIMatch) 
        {
            id = URIMatch.toString();
        } 
        else if(cleanStr.match(PublicID)) 
        {
            id = cleanStr;
        }
        else 
        {
            MyTelegramBot.sendMessage(
                msg.from.id, 
                `‚õîÔ∏è–í–≤–µ–¥–µ–Ω–Ω—ã–π URL –∏–º–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç—ã–π –∞–¥–¥—Ä–µ—Å/–Ω–æ–º–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: ${exampleURL}`
            );
            return;
        }
    }
    if(u.vkGroupsIds.indexOf(id) != -1) {
        MyTelegramBot.sendMessage(
            msg.from.id, 
            `‚õîÔ∏è–í—ã —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É`
        );
        return;
    }

    vk.getGroupName(id, (name) => {

        if(!name) {
            MyTelegramBot.sendMessage(
                msg.from.id, 
                `‚õîÔ∏è–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –í–ö.`
            );
            return;
        }

        MyTelegramBot.sendMessage(
            msg.from.id,
            `‚úÖ–ì—Ä—É–ø–ø–∞ "*${name}*" (ID: ${id}) –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø!`,
            {
                parse_mode : "Markdown"
            }
        );

        u.vkGroupsIds.push(id);
        u.vkGroupsNames.push(name);

        storeUser(u);
    });
});

MyTelegramBot.onText(new RegExp(Commands.unsubscribe), (msg, match) => {

    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }

    let u = getUser(msg.from.id);

    if(u.vkGroupsIds.length == 0) {
        MyTelegramBot.sendMessage(
            msg.from.id, 
            `‚õîÔ∏è–í—ã –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã`
        );
        return;
    }

    let keyboard = [[]];

    for(let i = 0; i < u.vkGroupsIds.length; i++) {
        keyboard.push([`${u.vkGroupsIds[i]} - "${u.vkGroupsNames[i]}"`]);
    }

    MyTelegramBot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤—ã –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", 
    ({
        reply_markup : {
            resize_keyboard : true,
            one_time_keyboard : true,
            keyboard : keyboard
    }}) as unknown as TelegramBot.SendMessageOptions);

    currentListening = listeningType.GroupToUnsubscribe;
});

MyTelegramBot.onText(/^\d{4,} - .+$/, (msg, match) => {
    
    if(currentListening == listeningType.GroupToUnsubscribe) {

        let id : string = msg.text.split('-')[0].trim();
        let u =  getUser(msg.from.id);

        let index = u.vkGroupsIds.indexOf(id);

        if(index == -1) {
            MyTelegramBot.sendMessage(
                msg.from.id, 
                `‚õîÔ∏è–ì—Ä—É–ø–ø–∞ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –≤ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö`,
                ({
                    reply_markup : {
                        keyboard : []
                }}) as unknown as TelegramBot.SendMessageOptions
            );
            return;
        }

        let name = u.vkGroupsNames[index];

        u.vkGroupsIds.splice(index, 1);
        u.vkGroupsNames.splice(index, 1);

        storeUser(u);

        MyTelegramBot.sendMessage(
            msg.from.id,
            `‚úÖ–ì—Ä—É–ø–ø–∞ "*${name}*" (ID: ${id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–æ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø!`,
            ({
                reply_markup : {
                    keyboard : []
                },
                parse_mode : "Markdown"
            }) as unknown as TelegramBot.SendMessageOptions
        );
    
        currentListening = listeningType.GenericCommand;
    }
});

MyTelegramBot.onText(new RegExp(Commands.getPosts), (msg, match) => {
    if(currentListening != listeningType.GenericCommand) {
        currentListening = listeningType.GenericCommand;
    }

    let u = getUser(msg.from.id);

    console.log("call");

    vk.getPosts(true, u.vkGroupsIds[0], 5, 0, (posts) => {
        posts.forEach(post => sendPostMessage(msg.from.id, post));
    })
});